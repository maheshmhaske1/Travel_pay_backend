/**
 * node-disk-storage
 * @author Copyright(c) 2021 by Restu wahyu saputra
 * MIT Licensed
 */
interface NodeDiskStorageOptions {
    readonly minSize?: number;
    readonly maxSize?: number;
}
interface NodeDiskStorage {
    set(key: string, value: any): Promise<boolean | undefined>;
    get(key: string): Promise<any | undefined>;
    remove(key: string): Promise<boolean | undefined>;
    key(key: string): Promise<boolean | undefined>;
    clear(): Promise<boolean | undefined>;
    keys(): Promise<string[] | undefined>;
}
export declare class NDS implements NodeDiskStorage {
    protected minSize: number;
    protected maxSize: number;
    protected items: Record<string, any>[];
    protected options: Record<string, any>;
    constructor(options?: Partial<NodeDiskStorageOptions>);
    /**
     * set data using key and value, into disk
     *
     * @param { String } input - required
     * @param { any } value - required
     * @return Promise<boolean | undefined>
     */
    set(key: string, value: any): Promise<boolean | undefined>;
    /**
     * get specific data using key, after saving data into disk
     *
     * @param { String } key - required
     * @return Promise<string | undefined>
     */
    get(key: string): Promise<any | undefined>;
    /**
     * remove specific data already exist using key, after saving data into disk
     *
     * @param { String } key - required
     * @return Promise<boolean | undefined>
     */
    remove(key: string): Promise<boolean | undefined>;
    /**
     * get specific keys exist, after saving data into disk
     * @param { String } key - required
     * @return Promise<boolean | undefined>
     */
    key(key: string): Promise<boolean | undefined>;
    /**
     * clear all keys exist, after saving data into disk
     *
     * @return Promise<boolean | undefined>
     */
    clear(): Promise<boolean | undefined>;
    /**
     * get all keys exist, after saving data into disk
     *
     * @return Promise<string[] | undefined>
     */
    keys(): Promise<string[] | undefined>;
}
export {};
